<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    ">
    <context:component-scan base-package="com.tipray">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <bean id="SpringBeanUtil" class="com.tipray.util.SpringBeanUtil" scope="singleton" lazy-init="false"/>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>

    <bean id="tr_dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 当连接池中的连接用完时，C3P0一次性创建新连接的数目 -->
        <property name="acquireIncrement" value="3"/>
        <!-- 定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30-->
        <property name="acquireRetryAttempts" value="30"/>
        <!-- 两次连接中间隔时间，单位毫秒，默认为1000-->
        <property name="acquireRetryDelay" value="100"/>
        <!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒，默认为0； -->
        <property name="checkoutTimeout" value="60000"/>
        <!-- 隔多少秒检查所有连接池中的空闲连接，默认为0表示不检查 -->
        <property name="idleConnectionTestPeriod" value="120"/>
        <!-- 获取连接失败将会引起所有等待获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调   用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认为 false -->
        <property name="breakAfterAcquireFailure" value="false"/>
        <!-- 最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0 -->
        <property name="maxIdleTime" value="1800"/>
        <!-- 初始化时创建的连接数，应在minPoolSize与maxPoolSize之间取值。默认为3 -->
        <property name="initialPoolSize" value="5"/>
        <!-- 数据库连接池保持的最小连接数 -->
        <property name="minPoolSize" value="5"/>
        <!-- 数据库连接池保持的最大连接数 -->
        <property name="maxPoolSize" value="300"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="tr_dataSource"/>
        <property name="typeAliasesPackage" value="com.tipray.bean"/>
        <property name="mapperLocations" value="classpath:/sqlmaps/*.xml"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>

    <!-- scan -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- <property name="basePackage" value="com.tipray" />
        <property name="annotationClass" value="com.tipray.core.annotation.MyBatisAnno"/>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property> -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <!-- dao层所在的包 -->
        <property name="basePackage" value="com.tipray.dao"></property>

    </bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="tr_dataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <!-- proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。 -->
    <!-- 如果proxy-target-class 属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。 -->
    <!-- 如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理将起作用。 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <import resource="applicationContext-webservice.xml"/>
    <import resource="applicationContext-job.xml"/>
</beans>